"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("grpc"));
const protoLoader = __importStar(require("@grpc/proto-loader"));
const path = __importStar(require("path"));
const runner_1 = __importDefault(require("@liteflow/orchestrator/lib/runner"));
const encoder_1 = require("@liteflow/orchestrator/lib/encoder");
const events_1 = require("events");
class Service {
    constructor() {
        this._client = this.register(process.env.LITEFLOW_REGISTER_SIGNATURE, process.env.LITEFLOW_ENDPOINT, process.env.LITEFLOW_SERVICE_HASH, process.env.LITEFLOW_ENV_HASH);
    }
    register(signature, endpoint, serviceHash, envHash) {
        return __awaiter(this, void 0, void 0, function* () {
            const runner = new runner_1.default(endpoint);
            const { token } = yield runner.register({ serviceHash, envHash }, signature);
            this._token = new grpc.Metadata();
            this._token.add('mesg_credential_token', token);
            const { mesg } = grpc.loadPackageDefinition(protoLoader.loadSync(path.join(__dirname, 'runner', 'runner.proto'), {
                includeDirs: [__dirname]
            }));
            return new mesg.grpc.runner.Runner(endpoint, grpc.credentials.createInsecure());
        });
    }
    listenTask(_a) {
        var tasks = __rest(_a, []);
        const res = new events_1.EventEmitter();
        if (this.tasks) {
            throw new Error(`listenTask should be called only once`);
        }
        this.tasks = tasks;
        this._client.then(client => {
            const stream = client.Execution({}, this._token);
            stream.on('data', x => res.emit('data', x));
            stream.on('error', x => res.emit('error', x));
            stream.on('close', () => res.emit('close'));
            stream.on('finish', () => res.emit('finish'));
        });
        res.on('data', this.handleTaskData.bind(this));
        return res;
    }
    emitEvent(event, data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data)
                throw new Error('data object must be send while emitting event');
            return this.unaryCall('Event', {
                key: event,
                data: encoder_1.encode(data)
            }, this._token);
        });
    }
    handleTaskData(execution) {
        return __awaiter(this, void 0, void 0, function* () {
            const callback = this.tasks[execution.taskKey];
            if (!callback) {
                throw new Error(`Task ${execution.taskKey} is not defined in your services`);
            }
            try {
                const outputs = yield callback(encoder_1.decode(execution.inputs));
                return this.unaryCall('Result', {
                    executionHash: execution.hash,
                    outputs: encoder_1.encode(outputs)
                }, this._token);
            }
            catch (err) {
                const error = err.message;
                return this.unaryCall('Result', {
                    executionHash: execution.hash,
                    error
                }, this._token);
            }
        });
    }
    unaryCall(method, arg, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = yield this._client;
            return new Promise((resolve, reject) => {
                client[method](arg, metadata, (err, res) => err ? reject(err) : resolve(res));
            });
        });
    }
}
exports.default = Service;
(module).exports = Service;
