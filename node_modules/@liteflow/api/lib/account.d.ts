/// <reference types="node" />
import { ICoin, IMsg } from './transaction';
import LCDClient from './util/lcd';
import { BIP32Interface } from 'bip32';
export declare const bech32Prefix = "mesg";
export declare const defaultHDPath = "m/44'/470'/0'/0/0";
export declare type IAccount = {
    address: string;
    coins: ICoin[];
    public_key: string;
    account_number: number;
    sequence: number;
};
export declare type IMsgTransfer = {
    from_address: string;
    to_address: string;
    amount: ICoin[];
};
export default class Account extends LCDClient {
    static deriveMnemonic(mnemonic: string, path?: string): BIP32Interface;
    static getPrivateKey(mnemonic: string, path?: string): Buffer;
    static generateMnemonic(): string;
    transferMsg(from: string, to: string, amount: ICoin[]): IMsg<IMsgTransfer>;
    import(mnemonic: string, path?: string, prefix?: string): Promise<IAccount>;
    get(address: string): Promise<IAccount>;
}
