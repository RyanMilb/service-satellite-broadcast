"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lcd_1 = __importDefault(require("./util/lcd"));
class Runner extends lcd_1.default {
    createMsg(owner, serviceHash, envHash) {
        return {
            type: 'runner/create',
            value: {
                owner,
                serviceHash,
                envHash
            }
        };
    }
    deleteMsg(owner, hash) {
        return {
            type: 'runner/delete',
            value: {
                owner,
                hash
            }
        };
    }
    get(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query(`/runner/get/${hash}`)).result;
        });
    }
    list(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            let runners = (yield this.query('/runner/list')).result || [];
            if (filter && filter.instanceHash)
                runners = runners.filter(x => x.instanceHash === filter.instanceHash);
            if (filter && filter.address)
                runners = runners.filter(x => x.address === filter.address);
            return runners;
        });
    }
    hash(owner, serviceHash, env) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query('/runner/hash', {
                serviceHash,
                env,
                address: owner,
            }, 'POST')).result;
        });
    }
    exists(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query(`/runner/exist/${hash}`)).result;
        });
    }
}
exports.default = Runner;
