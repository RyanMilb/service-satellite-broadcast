import Service from './service';
import Instance from './instance';
import Runner from './runner';
import Process from './process';
import Execution from './execution';
import Ownership from './ownership';
import Account, { IAccount } from './account';
import Transaction, { IMsg, IFee } from './transaction';
import LCDClient from './util/lcd';
declare type Event = {
    type: string;
    attributes: {
        key: string;
        value: string;
    }[];
};
declare type Log = {
    msg_index: number;
    log: string;
    events: Event[];
};
export declare type TxResult = {
    height: string;
    txhash: string;
    raw_log: string;
    gas_wanted: string;
    gas_used: string;
    data?: string;
    logs?: Log[];
    code?: number;
    codespace?: string;
};
declare class API extends LCDClient {
    service: Service;
    instance: Instance;
    runner: Runner;
    process: Process;
    execution: Execution;
    ownership: Ownership;
    account: Account;
    constructor(endpoint?: string);
    createTransaction(msgs: IMsg<any>[], account: IAccount, opts?: {
        fee?: IFee;
        chain_id?: string;
        account_number?: number;
        sequence?: number;
        memo?: string;
    }): Promise<Transaction>;
    fetchChainId(): Promise<string>;
    simulate(msgs: IMsg<any>[], from: string, chain_id: string, account_number: string, sequence: string): Promise<string>;
    broadcast(tx: Transaction, mode?: 'block' | 'sync' | 'async'): Promise<TxResult>;
}
export default API;
export { Service, Instance, Runner, Process, Execution, Ownership, Account, Transaction };
