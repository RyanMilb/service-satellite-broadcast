"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const service_1 = __importDefault(require("./service"));
exports.Service = service_1.default;
const instance_1 = __importDefault(require("./instance"));
exports.Instance = instance_1.default;
const runner_1 = __importDefault(require("./runner"));
exports.Runner = runner_1.default;
const process_1 = __importDefault(require("./process"));
exports.Process = process_1.default;
const execution_1 = __importDefault(require("./execution"));
exports.Execution = execution_1.default;
const ownership_1 = __importDefault(require("./ownership"));
exports.Ownership = ownership_1.default;
const account_1 = __importDefault(require("./account"));
exports.Account = account_1.default;
const transaction_1 = __importDefault(require("./transaction"));
exports.Transaction = transaction_1.default;
const lcd_1 = __importDefault(require("./util/lcd"));
// gasAdjustment is a multiplier to make sure transactions have enough gas when gas are estimated.
const gasAdjustment = '1.5';
class API extends lcd_1.default {
    constructor(endpoint) {
        super(endpoint);
        this.service = new service_1.default(endpoint);
        this.instance = new instance_1.default(endpoint);
        this.runner = new runner_1.default(endpoint);
        this.process = new process_1.default(endpoint);
        this.execution = new execution_1.default(endpoint);
        this.ownership = new ownership_1.default(endpoint);
        this.account = new account_1.default(endpoint);
    }
    createTransaction(msgs, account, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const account_number = opts.account_number
                ? opts.account_number.toString()
                : account.account_number.toString();
            const chain_id = opts.chain_id || (yield this.fetchChainId());
            const sequence = opts.sequence
                ? opts.sequence.toString()
                : account.sequence.toString();
            const fee = opts.fee || (yield (() => __awaiter(this, void 0, void 0, function* () {
                const gas = yield this.simulate(msgs, account.address, chain_id, account_number, sequence);
                return {
                    amount: [{ denom: '', amount: '0' }],
                    gas
                };
            }))());
            return new transaction_1.default({
                account_number,
                chain_id,
                fee,
                memo: opts.memo || '',
                msgs: msgs,
                sequence,
            });
        });
    }
    fetchChainId() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRequest(`/node_info`);
            const res = yield response.json();
            return res.node_info.network;
        });
    }
    simulate(msgs, from, chain_id, account_number, sequence) {
        return __awaiter(this, void 0, void 0, function* () {
            const base_req = {
                from,
                chain_id,
                account_number,
                sequence: sequence,
                gas_adjustment: gasAdjustment,
            };
            const response = yield this.postRequest('/txs/simulate', { base_req, msgs });
            const res = yield response.json();
            return res.gas_estimate;
        });
    }
    broadcast(tx, mode = 'block') {
        return __awaiter(this, void 0, void 0, function* () {
            const request = yield this.postRequest('/txs', { tx: tx.raw, mode });
            const res = (yield request.json());
            if (res.code > 0)
                throw new Error(res.raw_log);
            return res;
        });
    }
}
exports.default = API;
(module).exports = API;
