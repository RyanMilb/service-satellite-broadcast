"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const tape_1 = __importDefault(require("tape"));
const sinon = __importStar(require("sinon"));
const resolve_1 = require("./resolve");
const __1 = __importDefault(require(".."));
const instances = [{ hash: 'instancehash', serviceHash: 'servicehash', envHash: '' }];
const services = [{ hash: 'servicehash', sid: 'servicesid', configuration: {} }];
tape_1.default('resolve service invalid', function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        t.plan(1);
        const api = new __1.default();
        const sid = "invalid";
        sinon.stub(api.instance, 'get').callsFake(() => { throw new Error("not found"); });
        sinon.stub(api.service, 'list').callsFake(() => Promise.resolve(services));
        try {
            yield resolve_1.resolveSID(api, sid);
        }
        catch (e) {
            t.ok(e);
        }
    });
});
tape_1.default('resolve service by sid', function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        t.plan(1);
        const api = new __1.default();
        const sid = "servicesid";
        sinon.stub(api.instance, 'get').callsFake(() => { throw new Error("not found"); });
        sinon.stub(api.service, 'list').callsFake(() => Promise.resolve(services));
        sinon.stub(api.instance, 'list').callsFake(() => Promise.resolve(instances));
        const instanceHash = yield resolve_1.resolveSID(api, sid);
        t.equal(instanceHash, instances[0].hash);
    });
});
tape_1.default('resolve service by sid (multiple)', function (t) {
    return __awaiter(this, void 0, void 0, function* () {
        t.plan(1);
        const api = new __1.default();
        const sid = "multiplesid";
        sinon.stub(api.instance, 'get').callsFake(() => { throw new Error("not found"); });
        sinon.stub(api.service, 'list').callsFake(() => Promise.resolve([{ sid, configuration: {} }, { sid, configuration: {} }]));
        try {
            yield resolve_1.resolveSID(api, sid);
        }
        catch (e) {
            t.equal(e.message, "multiple services resolve multiplesid");
        }
    });
});
