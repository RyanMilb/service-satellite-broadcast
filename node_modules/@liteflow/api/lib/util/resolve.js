"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _resolutionTable = new Map();
// TODO: should we keep those functions??
// returns an instanceHash based on an sid
// throw an error if the sid doesn't exists or have if it has more or less than one instance running
exports.resolveSID = (api, sid) => __awaiter(void 0, void 0, void 0, function* () {
    if (_resolutionTable.has(sid))
        return _resolutionTable.get(sid);
    // TODO: add filter directly on list API
    const services = yield api.service.list();
    const matching = services.filter(x => x.sid === sid);
    if (matching.length === 0)
        throw new Error(`cannot resolve ${sid}`);
    if (matching.length > 1)
        throw new Error(`multiple services resolve ${sid}`);
    const service = matching[0];
    // find matching instances
    const instances = yield api.instance.list({ serviceHash: service.hash });
    if (!instances || instances.length === 0)
        throw new Error(`no instances running for the service ${service.sid}`);
    if (instances.length > 1)
        throw new Error(`multiple instances running for the service ${service.sid}`);
    _resolutionTable.set(sid, instances[0].hash);
    return _resolutionTable.get(sid);
});
const _resolutionTableRunners = new Map();
// returns a Runner Hash based on an sid
// throw an error if the sid doesn't exists or have if there is not exactly one runner running
exports.resolveSIDRunner = (api, sid) => __awaiter(void 0, void 0, void 0, function* () {
    if (_resolutionTableRunners.has(sid))
        return _resolutionTableRunners.get(sid);
    // TODO: add filter directly on list API
    const services = yield api.service.list();
    const matching = services.filter(x => x.sid === sid);
    if (matching.length === 0)
        throw new Error(`cannot resolve ${sid}`);
    if (matching.length > 1)
        throw new Error(`multiple services resolve ${sid}`);
    const service = matching[0];
    // find matching instances
    const instances = yield api.instance.list({ serviceHash: service.hash });
    if (!instances || instances.length === 0)
        throw new Error(`no instances for the service ${service.sid}`);
    if (instances.length > 1)
        throw new Error(`multiple instances for the service ${service.sid}`);
    const instance = instances[0];
    // find matching runners
    const runners = yield api.runner.list({ instanceHash: instance.hash });
    if (!runners || runners.length === 0)
        throw new Error(`no runners for the service ${service.sid}`);
    if (runners.length > 1)
        throw new Error(`multiple runners for the service ${service.sid}`);
    const runner = runners[0];
    _resolutionTableRunners.set(sid, runner.hash);
    return _resolutionTableRunners.get(sid);
});
