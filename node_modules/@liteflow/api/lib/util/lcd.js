"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const url_1 = require("url");
class LCDClient {
    constructor(endpoint = "http://localhost:1317") {
        this._endpoint = endpoint;
    }
    query(path, data, method = 'GET') {
        return __awaiter(this, void 0, void 0, function* () {
            const response = method === 'GET'
                ? yield this.getRequest(path, data)
                : yield this.postRequest(path, data);
            const result = yield response.json();
            if (result.error)
                throw new Error(result.error);
            if (response.headers.has('x-page')) {
                result.pagination = {
                    page: parseInt(response.headers.get('x-page'), 10),
                    limit: parseInt(response.headers.get('x-limit'), 10),
                    totalCount: parseInt(response.headers.get('x-total-count'), 10),
                };
            }
            return result;
        });
    }
    getRequest(path, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return node_fetch_1.default(this.fullEndpoint(path, params), {
                headers: {
                    "Content-Type": "application/json"
                }
            });
        });
    }
    postRequest(path, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return node_fetch_1.default(this.fullEndpoint(path), {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {
                    "Content-Type": "application/json"
                }
            });
        });
    }
    fullEndpoint(path, params) {
        const encodedParams = Object.keys(params || {})
            .map((key) => `${key}=${params[key]}`)
            .join('&');
        return [
            url_1.resolve(this._endpoint, path),
            encodedParams
        ]
            .filter(x => x)
            .join('?');
    }
}
exports.default = LCDClient;
