"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lcd_1 = __importDefault(require("./util/lcd"));
const bip39_1 = require("bip39");
const bip32_1 = require("bip32");
const bech32_1 = require("bech32");
const crypto_1 = require("crypto");
exports.bech32Prefix = 'mesg';
exports.defaultHDPath = "m/44'/470'/0'/0/0";
class Account extends lcd_1.default {
    static deriveMnemonic(mnemonic, path = exports.defaultHDPath) {
        if (!bip39_1.validateMnemonic(mnemonic))
            throw new Error('invalid mnemonic');
        const seed = bip39_1.mnemonicToSeedSync(mnemonic);
        const masterKey = bip32_1.fromSeed(seed);
        return masterKey.derivePath(path);
    }
    static getPrivateKey(mnemonic, path) {
        return Account.deriveMnemonic(mnemonic, path).privateKey;
    }
    static generateMnemonic() {
        const entropy = crypto_1.randomBytes(32);
        if (entropy.length !== 32)
            throw Error(`Entropy has incorrect length`);
        return bip39_1.entropyToMnemonic(entropy.toString('hex'));
    }
    transferMsg(from, to, amount) {
        return {
            type: 'cosmos-sdk/MsgSend',
            value: {
                from_address: from,
                to_address: to,
                amount
            }
        };
    }
    import(mnemonic, path, prefix = exports.bech32Prefix) {
        return __awaiter(this, void 0, void 0, function* () {
            const child = yield Account.deriveMnemonic(mnemonic, path);
            const address = bech32_1.encode(prefix, bech32_1.toWords(child.identifier));
            return this.get(address);
        });
    }
    get(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = (yield this.query(`/auth/accounts/${address}`)).result.value;
            if (!account.address)
                account.address = address;
            return account;
        });
    }
}
exports.default = Account;
