/// <reference types="node" />
export declare type ITx = {
    msg: any[];
    fee: any;
    signatures: any[];
    memo: string;
};
export declare type IMsg<T> = {
    type: string;
    value: T;
};
export declare type ICoin = {
    denom: string;
    amount: string;
};
export declare type IDecCoin = {
    denom: string;
    amount: number | string;
};
export declare type IFee = {
    amount: ICoin[];
    gas: number | string;
};
export declare type IStdTx = {
    msgs: IMsg<any>[];
    fee: IFee;
    chain_id: string;
    account_number: string;
    sequence: string;
    memo: string;
};
export default class Transaction {
    private _stdTx;
    raw: ITx;
    static sign(message: string, ecpairPriv: Buffer): {
        signature: Uint8Array;
        recovery: number;
    };
    constructor(stdTx: IStdTx);
    signWithMnemonic(mnemonic: string, path?: string): Transaction;
    sign(ecpairPriv: Buffer): Transaction;
}
