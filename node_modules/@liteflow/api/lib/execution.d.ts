import LCDClient, { IPaginationResponse } from './util/lcd';
import { IStruct } from './struct';
export declare enum Status {
    Unknown = 0,
    Created = 1,
    InProgress = 2,
    Completed = 3,
    Failed = 4
}
export declare type IExecution = {
    hash: string;
    parentHash?: string;
    eventHash?: string;
    status: Status;
    instanceHash: string;
    taskKey: string;
    inputs?: IStruct[];
    outputs?: IStruct[];
    error?: (string | null);
    tags?: (string[] | null);
    processHash?: (string | null);
    nodeKey?: (string | null);
    executorHash: string;
    price?: string;
    blockHeight?: number;
    emitters?: {
        runnerHash: string;
        blockHeight: number;
    }[];
    address?: string;
};
declare type IListFilter = {
    parentHash?: string;
    eventHash?: string;
    instanceHash?: string;
    processHash?: string;
    status?: 'Proposed' | 'InProgress' | 'Completed' | 'Failed';
    stepKey?: string;
};
declare type IPagination = {
    page?: number;
    limit?: number;
};
export default class Execution extends LCDClient {
    get(hash: string): Promise<IExecution>;
    list(filter?: IListFilter, pagination?: IPagination): Promise<IExecution[] & {
        pagination: IPaginationResponse;
    }>;
}
export {};
