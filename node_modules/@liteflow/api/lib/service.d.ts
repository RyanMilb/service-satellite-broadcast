import LCDClient from './util/lcd';
import { IMsg } from './transaction';
export declare type IConfiguration = {
    volumes?: string[] | null;
    volumesFrom?: string[] | null;
    ports?: string[] | null;
    args?: string[] | null;
    command?: string | null;
    env?: string[] | null;
};
export declare type IDependency = IConfiguration & {
    key: string;
    image: string;
};
export declare type IParameter = {
    key: string;
    name?: string | null;
    description?: string | null;
    type: 'String' | 'Number' | 'Boolean' | 'Object' | 'Any';
    optional?: boolean | null;
    repeated?: boolean | null;
    object?: IParameter[] | null;
};
export declare type ITask = {
    key: string;
    name?: string | null;
    description?: string | null;
    inputs?: IParameter[] | null;
    outputs?: IParameter[] | null;
};
export declare type IEvent = {
    key: string;
    name?: string | null;
    description?: string | null;
    data?: IParameter[] | null;
};
export declare type IService = {
    hash?: string;
    sid?: string | null;
    name?: string | null;
    description?: string | null;
    configuration: IConfiguration;
    tasks?: ITask[] | null;
    events?: IEvent[] | null;
    dependencies?: IDependency[];
    repository?: string | null;
    source?: string | null;
    address?: string | null;
};
export declare type IDefinition = {
    sid?: string | null;
    name?: string | null;
    description?: string | null;
    configuration?: IConfiguration;
    tasks?: ITask[] | null;
    events?: IEvent[] | null;
    dependencies?: IDependency[] | null;
    repository?: string | null;
    source?: string | null;
};
export declare type IMsgCreate = IDefinition & {
    owner: string;
};
export default class Service extends LCDClient {
    createMsg(owner: string, definition: IDefinition): IMsg<IMsgCreate>;
    get(hash: string): Promise<IService>;
    exists(hash: string): Promise<boolean>;
    hash(definition: IDefinition): Promise<string>;
    list(): Promise<IService[]>;
}
