"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const base58 = __importStar(require("@liteflow/api/lib/util/base58"));
const encoder = __importStar(require("./encoder"));
const client_1 = require("./client");
// TODO: To improve using the types but if include the type, the definition is still included in the js
exports.Status = {
    Unknown: 0,
    Proposed: 1,
    InProgress: 2,
    Completed: 3,
    Failed: 4,
};
class Execution extends client_1.Client {
    constructor(endpoint) {
        super(endpoint, 'Execution');
    }
    create(request, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            const gprcReq = {
                executorHash: base58.decode(request.executorHash),
                inputs: encoder.encode(request.inputs),
                price: request.price,
                tags: request.tags,
                taskKey: request.taskKey
            };
            return this.unaryCall("Create", gprcReq, signature);
        });
    }
    stream(request, signature) {
        const grpcReq = {
            filter: {
                executorHash: request.filter.executorHash ? base58.decode(request.filter.executorHash) : null,
                instanceHash: request.filter.instanceHash ? base58.decode(request.filter.instanceHash) : null,
                statuses: request.filter.statuses,
                tags: request.filter.tags,
                taskKey: request.filter.taskKey
            }
        };
        return this.streamCall('Stream', grpcReq, signature);
    }
}
exports.default = Execution;
