"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("grpc"));
const protoLoader = __importStar(require("@grpc/proto-loader"));
const path = __importStar(require("path"));
class Client {
    constructor(endpoint, service) {
        const protoOpts = { includeDirs: [__dirname] };
        const { mesg } = grpc.loadPackageDefinition(protoLoader.loadSync(path.join(__dirname, 'orchestrator', service.toLowerCase() + '.proto'), protoOpts));
        this.client = new mesg.grpc.orchestrator[service](endpoint, grpc.credentials.createInsecure());
    }
    streamCall(method, arg, signature) {
        return this.client[method](arg, this.meta(signature));
    }
    unaryCall(method, arg, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.client[method](arg, this.meta(signature), (err, res) => err ? reject(err) : resolve(res));
            });
        });
    }
    meta(signature) {
        const meta = new grpc.Metadata();
        meta.add('mesg_request_signature', signature);
        return meta;
    }
}
exports.Client = Client;
