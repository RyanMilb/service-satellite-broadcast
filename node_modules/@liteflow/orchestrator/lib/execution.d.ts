import * as grpc from 'grpc';
import { Client } from './client';
import * as Type from './typedef/execution';
import * as API from './api/execution';
export declare const Status: {
    [key: string]: Type.mesg.types.Status;
};
export declare type CreateRequest = {
    executorHash: string;
    taskKey: string;
    inputs: Object;
    tags?: string[];
    price?: string;
};
export declare type StreamRequest = {
    filter: {
        statuses?: Type.mesg.types.Status[];
        instanceHash?: string;
        taskKey?: string;
        tags?: string[];
        executorHash?: string;
    };
};
export default class Execution extends Client {
    constructor(endpoint: string);
    create(request: CreateRequest, signature: string): Promise<API.mesg.grpc.orchestrator.IExecutionCreateResponse>;
    stream(request: StreamRequest, signature: string): grpc.ClientReadableStream<Type.mesg.types.IExecution>;
}
