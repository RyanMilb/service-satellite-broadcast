"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeField = (value) => {
    switch (Object.prototype.toString.call(value)) {
        case '[object Null]':
        case '[object Undefined]':
            return { nullValue: value };
        case '[object Object]':
            return { structValue: {
                    fields: encodeFields(value)
                } };
        case '[object Array]':
            return { listValue: {
                    values: value.map((_, i) => exports.encodeField(value[i]))
                } };
        case '[object Number]':
            return { numberValue: value };
        case '[object Boolean]':
            return { boolValue: value };
        case '[object String]':
            return { stringValue: value };
        case '[object Date]':
            return { stringValue: value.toJSON() };
        case '[object BigNumber]':
            return { stringValue: value.toJSON() };
        default:
            throw new Error('not supported');
    }
};
const encodeFields = (data) => Object.keys(data || {}).reduce((prev, next) => (Object.assign(Object.assign({}, prev), { [next]: exports.encodeField(data[next]) })), {});
exports.encode = (data) => {
    return {
        fields: encodeFields(data)
    };
};
exports.decodeField = (field) => {
    const kind = ['list', 'struct', 'string', 'number', 'bool']
        .find((x) => field[`${x}Value`] !== undefined) || 'null';
    const value = field[`${kind}Value`];
    switch (kind) {
        case 'string':
        case 'number':
        case 'bool':
        case 'null':
            return value;
        case 'struct':
            return exports.decode(value);
        case 'list':
            return (value.values || []).map((_, i) => exports.decodeField(value.values[i]));
        default:
            throw new Error('not implemented');
    }
};
exports.decode = (data) => {
    return Object.keys(data && data.fields ? data.fields : {}).reduce((prev, next) => (Object.assign(Object.assign({}, prev), { [next]: exports.decodeField(data.fields[next]) })), {});
};
